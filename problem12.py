#!/usr/bin/env python3

# Problem 12: Highly divisible triangular number

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five
# divisors.

# What is the value of the first triangle number to have over five
# hundred divisors?

from functools import reduce

def product(factors):
    return reduce(lambda a,b: a*b, factors)

def factors(n):
    i = 2
    while i <= n:
        while n % i == 0:
            n //= i
            yield i
        i += 1

def problem12():
    i = 2
    A = list(factors(i))
    while True:
        B = list(factors(i+1))
        L = A + B
        L.remove(2)
        if product([L.count(e)+1 for e in set(L)]) > 500:
            return i*(i+1)//2
        i += 1
        A = B

if __name__ == '__main__':
    print(problem12())
